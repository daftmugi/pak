#!/usr/bin/env ruby

################################################################################
# PAK.rb                                                                       #
################################################################################
#
# PAK Packer/Unpacker for Quake.
# https://github.com/daftmugi/pak

################################################################################
# PAK Archive Spec                                                             #
################################################################################
#
# PAK Archive
#     Header
#     Entry Data
#     Table
#
# Header
#     char id[4]         // "PACK"
#     int table_offset   // Offset to the entries table
#     int table_size     // Size of the table
#
# Entry
#     char path[56]      // Null-terminated path
#     int offset         // Offset of the entry
#     int size           // Size of the data

################################################################################
# MIT License                                                                  #
################################################################################
#
# Copyright (c) 2022 Daft Mugi
#
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included in all
# copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
# SOFTWARE.

if Gem::Version.new(RUBY_VERSION) < Gem::Version.new("3.0.0")
  abort("Ruby 3.0+ is required")
end

require "fileutils"
require "find"
require "pathname"

class PAK
  VERSION = "1.0.1"

  # 4-byte null-padded ASCII string, two 32-bit unsigned little-endian integers
  HEADER_TEMPLATE = "a4V2"
  # id(char[4]) + table_offset(4) + table_size(4)
  HEADER_SIZE_BYTES = 12
  HEADER_ID = "PACK"

  # 56-byte null-padded ASCII string, two 32-bit unsigned little-endian integers
  ENTRY_TEMPLATE = "a56V2"
  # path(char[56]) + offset(4) + size(4)
  ENTRY_SIZE = 64
  ENTRY_PATH_LENGTH = 56

  Header = Struct.new(:table_offset, :table_size, :num_entries) do
    def initialize(table_offset:, table_size: nil, num_entries: nil)
      table_size = num_entries * ENTRY_SIZE if table_size.nil? && num_entries
      num_entries = table_size / ENTRY_SIZE if num_entries.nil? && table_size
      super(table_offset, table_size, num_entries)
    end
  end

  Entry = Struct.new(:path, :offset, :size, keyword_init: true)

  attr_reader :options

  def self.main(args = ARGV)
    debug_mode = args.include?("--debug")
    self.new.run(args)
  rescue => e
    raise e if debug_mode
    abort(e.message)
  end

  def initialize(opts = nil)
    @options = default_options()
    set_options(opts) if opts
  end

  def default_options
    {
      command: nil,
      regex: nil,
      pak_path: nil,
      root_path: nil,

      to_lower: false,
      noop: false,
      verbose: false,
      very_verbose: false,

      # find duplicates
      paths: nil,
      exclude_paks: [],
    }
  end

  def set_options(opts)
    @options.merge!(opts)
  end

  def to_lower?
    @options[:to_lower] || @options[:command] == :find_duplicates
  end

  def noop?
    @options[:noop]
  end

  def verbose?
    @options[:verbose] || @options[:very_verbose]
  end

  def very_verbose?
    @options[:very_verbose]
  end

  def run(args)
    # For "list" piped to "less", handle "Broken pipe <STDOUT> (Errno::EPIPE)"
    Signal.trap("SIGPIPE", "SYSTEM_DEFAULT")

    # For "Ctrl-c" at prompts
    Signal.trap("SIGINT", "SYSTEM_DEFAULT")

    set_options(process_args(args))

    case options[:command]
    when :list             then list_pak()
    when :extract          then extract_pak()
    when :pipe_extract     then pipe_extract_pak()
    when :create           then create_pak()
    when :find_duplicates  then find_duplicates()
    else raise(usage)
    end
  end

  def usage
    cmd = File.basename($0)

    <<~EOS
    #{cmd} version #{VERSION}

    Usage: #{cmd} -l PAK_FILE [-m REGEX]        [-L]      [-v | -vv]
           #{cmd} -x PAK_FILE [-m REGEX] -d DIR [-L] [-n]
           #{cmd} -p PAK_FILE [-m REGEX]        [-L]
           #{cmd} -c PAK_FILE         -d DIR [-L] [-n] [-v | -vv]
           #{cmd} -D [PATHS]  [-m REGEX] [-e EXCLUDE_PAKS]

    Commands:
        -l PAK_FILE    : list PAK archive files
        -x PAK_FILE    : extract PAK archive
        -p PAK_FILE    : extract PAK archive files to stdout (pipe)
        -c PAK_FILE    : create PAK archive
        -D             : read {pak0.pak,pak1.pak,...} and print duplicates
        -D help        : print more details about -D usage
        --help, -h     : print this message
        --version      : print version

    Options:
        -m REGEX       : match file paths by a regular expression
        -d DIR         : create from/extract to directory
        -L             : convert filenames to lowercase
        -n             : no-op, dry-run
        -v             : verbose
        -vv            : verbose with extra info (very verbose)
        --debug        : more detailed error messages
    EOS
  end

  def find_duplicates_usage
    cmd = File.basename($0)

    <<~EOS
    Usage: #{cmd} -D [PATHS] [-m REGEX] [-e EXCLUDE_PAKS]

    -D [PATHS]
        Find duplicate file paths in pak archives, as Quake would load them.
        This is useful for finding conflicting files.

        Quake only reads pak files in sequential order. Given pak0.pak,
        pak1.pak, and pak3.pak, Quake only reads pak0.pak and pak1.pak.
        It skips pak3.pak, because there is no pak2.pak. The files in
        the last loaded pak have priority over earlier loaded paks.

        PATHS
            Comma-separated list of paths to search for '.pak' files.
            When PATHS is omitted, the current directory is searched for '.pak' files.
            The load priority of the list is highest (left) to lowest (right).
            For example:
                "-D" -> search current directory './'
                "-D mod1" -> from current directory, search './mod1'
                "-D mod1,mod2,mod3" -> search './mod1', './mod2', './mod3'
                "-D mod1,mod2,." -> search './mod1', './mod2', './'
                  NOTE: './' is the current directory.


    -m REGEX
        Match file paths by a regular expression
        For example:
            "-m 'bsp'" -> match names that include 'dds'
            "-m '\.bsp$'" -> match names that end with '.dds'
            "-m 'maps/.*'" -> match path 'maps'


    -e EXCLUDE_PAKS
        Comma-separated set of paks to exclude, in the form 'pak0,pak1,...'.
        The paks in the set do not need to include the '.pak' extension.

        A duplicate file prints only if there is at least one pak not
        included in the EXCLUDE_PAKS set.

        Examples:
          pak0.pak -> maps/a.bsp
          pak1.pak -> maps/a.bsp
          pak1.pak -> maps/b.bsp
          pak2.pak -> maps/b.bsp
          pak2.pak -> maps/c.bsp
          pak3.pak -> maps/c.bsp

          $ #{cmd} -D
          maps/c.bsp: pak3.pak, pak2.pak
          maps/b.bsp: pak2.pak, pak1.pak
          maps/a.bsp: pak1.pak, pak0.pak

          $ #{cmd} -D -e pak0
          maps/c.bsp: pak3.pak, pak2.pak
          maps/b.bsp: pak2.pak, pak1.pak
          maps/a.bsp: pak1.pak, pak0.pak

          $ #{cmd} -D -e pak0,pak1
          maps/c.bsp: pak3.pak, pak2.pak
          maps/b.bsp: pak2.pak, pak1.pak

          $ #{cmd} -D -e pak1,pak2
          maps/c.bsp: pak3.pak, pak2.pak
          maps/a.bsp: pak1.pak, pak0.pak

          $ #{cmd} -D -e pak0,pak1,pak2
          maps/c.bsp: pak3.pak, pak2.pak

          $ #{cmd} -D -e pak0,pak1,pak2,pak3
          <no output>
    EOS
  end

  def process_args(args)
    opts = {}
    raise(usage) if args.size < 1

    if args.include?("-h") || args.include?("--help")
      puts(usage)
      exit(0)
    end
    if args.include?("--version")
      puts(VERSION)
      exit(0)
    end

    opts[:to_lower]            = args.include?("-L")
    opts[:noop]                = args.include?("-n")
    opts[:verbose]             = args.include?("-v")
    opts[:very_verbose]        = args.include?("-vv")

    if index = args.find_index("-m")
      opts[:regex] = maybe_regex(args[index + 1])
    end
    if index = args.find_index("-e")
      opts[:exclude_paks] = maybe_exclude_paks(args[index + 1])
    end
    if index = args.find_index("-d")
      raise(usage) unless opts[:root_path] = args[index + 1]
    end

    ["-l", "-x", "-p", "-c"].each do |cmd|
      if index = args.find_index(cmd)
        raise(usage) if opts[:command]
        opts[:command] =
          case cmd
          when "-l" then :list
          when "-x" then :extract
          when "-p" then :pipe_extract
          when "-c" then :create
          end
        raise(usage) unless opts[:pak_path] = args[index + 1]
      end
    end

    if index = args.find_index("-D")
      raise(usage) if opts[:command]
      opts[:command] = :find_duplicates
      if args[index + 1] == "help"
        puts(find_duplicates_usage)
        exit(0)
      end
      opts[:paths] = maybe_paths(args[index + 1])
    end

    opts
  end

  def maybe_regex(arg)
    return nil if !arg || arg.start_with?("-")
    Regexp.new(arg)
  end

  def maybe_exclude_paks(arg)
    return [] if !arg || arg.start_with?("-")
    arg.split(",").map { |pak| pak.end_with?(".pak") ? pak : "#{pak}.pak" }
  end

  def maybe_paths(arg)
    return nil if !arg || arg.start_with?("-")
    arg.split(",")
  end

  def validate_options
    raise("No command given") unless options[:command]
    raise("No PAK file given") unless options[:pak_path]

    root_path = options[:root_path]
    if root_path
      case options[:command]
      when :list
        raise("Cannot use '-d' with list")
      when :pipe_extract
        raise("Cannot use '-d' with pipe")
      end
    else
      case options[:command]
      when :extract
        raise("Must use '-d' to specify the directory to extract the PAK to")
      when :create
        raise("Must use '-d' to specify the directory to create the PAK from")
      end
    end
  end

  ######################################################################
  # READ PAK
  ######################################################################

  def open_pak(pak_path, &block)
    pak_path_expanded = File.expand_path(pak_path)

    raise("File not found: #{pak_path}") unless File.exist?(pak_path)
    raise("Not a file: #{pak_path}")     unless File.file?(pak_path)

    File.open(pak_path_expanded, "rb") do |pak_file|
      id = pak_file.read(4) # "PACK"
      raise("Not a PAK archive: #{pak_path}") if id != HEADER_ID
      yield(pak_file)
    end
  end

  def each_pak_entry(pak_file, &block)
    header = read_header(pak_file)
    table = extract_table(header, pak_file)

    table.each do |entry|
      yield(entry)
    end
  end

  def read_header(pak_file)
    pak_file.seek(4) # id(4)
    table_offset = read_int(pak_file)
    table_size = read_int(pak_file)
    Header.new(table_offset: table_offset, table_size: table_size)
  end

  def read_path(file)
    # null-terminated string
    file.read(ENTRY_PATH_LENGTH).unpack("Z#{ENTRY_PATH_LENGTH}")[0]
  end

  def read_int(file)
    # 32-bit unsigned little
    file.read(4).unpack("V")[0]
  end

  def extract_table(header, pak_file)
    pak_file.seek(header.table_offset)

    table = []

    (0...header.num_entries).each do |i|
      path = read_path(pak_file)
      path = path.downcase if to_lower?
      offset = read_int(pak_file)
      size = read_int(pak_file)

      next if options[:regex] && !path.match?(options[:regex])

      entry = Entry.new(
        path: path,
        offset: offset,
        size: size
      )

      table << entry
    end

    table
  end


  ######################################################################
  # LIST
  ######################################################################

  def list_pak
    set_options(command: :list)
    validate_options()

    open_pak(options[:pak_path]) do |pak_file|
      print_list_header()

      total_size = 0
      total_files = 0

      each_pak_entry(pak_file) do |entry|
        total_size += entry.size
        total_files += 1
        print_list_entry(entry, total_size, total_files)
      end

      print_list_footer(total_size, total_files)
    end
  end

  def print_list_entry(entry, total_size, total_files)
    if verbose?
      entry_data = [entry.size]
      entry_data << entry.offset if very_verbose?
      entry_data << entry.path

      fmt_str = very_verbose? ? "%10s  %10s  %s" : "%10s  %s"
      puts(fmt_str % entry_data)
    else
      puts(entry.path)
    end
  end

  def print_list_header
    return unless verbose?
    puts("Archive: #{options[:pak_path]}")

    if very_verbose?
      puts("   Size       Offset    Path")
      puts("----------  ----------  -----------------------------------")
    else
      puts("   Size     Path")
      puts("----------  -----------------------------------")
    end
  end

  def print_list_footer(total_size, total_files)
    return unless verbose?
    files_string = total_files == 1 ? "file" : "files"

    if very_verbose?
      puts("----------              -----------------------------------")
      puts("%10d              %d %s" % [total_size, total_files, files_string])
    else
      puts("----------  -----------------------------------")
      puts("%10d  %d %s" % [total_size, total_files, files_string])
    end
  end


  ######################################################################
  # PIPE EXTRACT
  ######################################################################

  def pipe_extract_pak
    set_options(command: :pipe_extract)
    validate_options()

    open_pak(options[:pak_path]) do |pak_file|
      each_pak_entry(pak_file) do |entry|
        pipe_entry(entry, pak_file)
      end
    end
  end

  def pipe_entry(entry, pak_file)
    stream_entry(entry, pak_file, $stdout)
  end


  ######################################################################
  # EXTRACT
  ######################################################################

  def extract_pak
    set_options(command: :extract)
    validate_options()

    root_path = options[:root_path]
    raise("Invalid target directory: ''") if root_path.empty?
    raise("File exists: #{root_path}")    if File.file?(root_path)

    open_pak(options[:pak_path]) do |pak_file|
      entry_fmt_str = "%10s    %s"
      handle_conflict_choice = :not_set

      each_pak_entry(pak_file) do |entry|
        write_path = File.join(root_path, entry.path)
        parent_path = File.dirname(write_path)
        file_in_path = get_closest_file_in_path(parent_path)

        # NOTE
        #   Warn that directory from archive cannot overwrite file on disk.
        #   Warn that file from archive cannot overwrite directory on disk.
        status =
          if File.directory?(write_path)
            :file_is_dir
          elsif File.file?(write_path)
            handle_conflict_choice = handle_conflict(entry.path, handle_conflict_choice)
            case handle_conflict_choice
            when :yes, :all
              write_entry(entry, pak_file, write_path)
              strings(:overwrite)
            else
              strings(:skip)
            end
          elsif file_in_path
            :file_path_has_file
          else
            mkdir_p(parent_path)
            write_entry(entry, pak_file, write_path)
            strings(:extract)
          end

        case status
        when :file_is_dir, :file_path_has_file
          error_message_1 =
            if status == :file_is_dir
              "%s exists but is not a file" % [File.join(write_path, "")]
            else
              "%s exists but is not a directory" % [file_in_path]
            end
          puts(entry_fmt_str % ["error", error_message_1])
          error_message_2 = "-> skipping %s" % [entry.path]
          puts(entry_fmt_str % ["", error_message_2])
        else
          puts(entry_fmt_str % [status, entry.path])
        end
      end
    end
  end

  def get_closest_file_in_path(path)
    return nil   if File.directory?(path)
    return path  if File.file?(path)

    parent = File.dirname(path)
    get_closest_file_in_path(parent)
  end

  def write_entry(entry, pak_file, file_path)
    return if noop?
    File.open(file_path, "wb") do |file|
      stream_entry(entry, pak_file, file)
    end
  end

  def handle_conflict(path, previous_conflict_choice)
    choice = :invalid
    conflict_choice =
      case previous_conflict_choice
      when :all, :none
        previous_conflict_choice
      else
        choice = prompt_user_about_conflict(path) while choice == :invalid
        choice
      end

    conflict_choice
  end

  def prompt_user_about_conflict(path)
    $stderr.print("replace? #{path} [y]es, [n]o, [A]ll, [N]one: ")
    choice = $stdin.readline().strip()

    case choice
    when "y" then :yes
    when "n" then :no
    when "A" then :all
    when "N" then :none
    else :invalid
    end
  end


  ######################################################################
  # CREATE
  ######################################################################

  def create_pak
    set_options(command: :create)
    validate_options()

    pak_path = options[:pak_path]
    pak_path_expanded = File.expand_path(pak_path)
    root_path = options[:root_path]

    raise("Invalid source directory: ''")          if root_path.empty?
    raise("File already exists: #{pak_path}")      if File.exist?(pak_path)
    raise("Not a directory: #{root_path}")         if File.file?(root_path)
    raise("Directory not found: #{root_path}") unless File.directory?(root_path)

    Dir.chdir(options[:root_path]) do
      new_pak_file(pak_path_expanded) do |pak_file|
        entries = archive_files(pak_file)
        table_offset = archive_table(entries, pak_file)
        header = Header.new(table_offset: table_offset, num_entries: entries.size)
        archive_header(header, pak_file)
      end
    end
  end

  def new_pak_file(path, &block)
    if noop?
      require "stringio"
      StringIO.open("", "wb", &block)
    else
      File.open(path, "wb", &block)
    end
  end

  def archive_header(header, pak_file)
    pak_file.seek(0)
    header_data = [
      HEADER_ID,
      header.table_offset,
      header.table_size
    ]
    packed_header = header_data.pack(HEADER_TEMPLATE)
    pak_write(packed_header, pak_file)
  end

  def archive_table(entries, pak_file)
    table_offset = pak_file.tell()

    entries.each do |entry|
      entry_path = to_lower? ? entry.path.downcase() : entry.path

      entry_data = [
        entry_path.encode("ascii"),
        entry.offset,
        entry.size
      ]
      packed_entry = entry_data.pack(ENTRY_TEMPLATE)
      pak_write(packed_entry, pak_file)
    end

    table_offset
  end

  def archive_files(pak_file)
    pak_file.seek(HEADER_SIZE_BYTES)
    offset = pak_file.tell()
    entries = []

    print_create_header()

    Find.find(".") do |path|
      next if File.directory?(path)
      file_path = Pathname.new(path).relative_path_from(".").to_s
      file_path = clean_path(file_path)

      entry = Entry.new(
        path: file_path,
        offset: offset,
        size: File.size(path)
      )

      archive_file(entry, pak_file)
      offset += entry.size

      print_create_entry(entry)
      entries << entry
    end

    print_create_footer(entries)

    entries
  end

  def archive_file(entry, pak_file)
    File.open(entry.path, "rb") do |file|
      chunk_size = 1024 * 1024

      until file.eof?
        # read() does not read passed eof even when chunk_size > bytes_remaining
        bytes = file.read(chunk_size)
        pak_write(bytes, pak_file)
      end
    end
  end

  def clean_path(path)
    max_length = ENTRY_PATH_LENGTH - 1 # minus null terminator

    if path.length > max_length
      raise("Path more than #{max_length} characters: #{path}")
    end

    begin
      path.encode("ascii")
    rescue
      raise("Path not ASCII compatible: #{path}")
    end
  end

  def print_create_entry(entry)
    action = :archive
    entry_path = to_lower? ? entry.path.downcase() : entry.path

    if verbose?
      entry_data = [strings(action)]
      entry_data << entry.size
      entry_data << entry.offset if very_verbose?
      entry_data << entry_path

      fmt_str = very_verbose? ? "%-8s  %10s  %10s  %s" : "%-8s  %10s  %s"
    else
      fmt_str = "%8s  %s"
      entry_data = [
        strings(action),
        entry_path,
      ]
    end

    puts(fmt_str % entry_data)
  end

  def print_create_header
    return unless verbose?

    if very_verbose?
      puts(" Action      Size       Offset    Path")
      puts("--------  ----------  ----------  -----------------------------------")
    else
      puts(" Action      Size     Path")
      puts("--------  ----------  -----------------------------------")
    end
  end

  def print_create_footer(entries)
    return unless verbose?
    total_size = entries.sum { |e| e.size }
    total_files = entries.size
    files_string = total_files == 1 ? "file" : "files"

    if very_verbose?
      puts("--------  ----------  ----------  -----------------------------------")
      fmt_str = "          %10d              %d %s"
    else
      puts("--------  ----------  -----------------------------------")
      fmt_str = "          %10d  %d %s"
    end

    puts(fmt_str % [total_size, total_files, files_string])
  end


  ######################################################################
  # FIND DUPLICATES
  ######################################################################

  def find_duplicates
    set_options(command: :find_duplicates)
    options[:paths] ||= [Dir.pwd]  # pwd as default
    paks_by_priority = []

    options[:paths].each do |path|
      pak_paths = []
      i = 0; loop do
        pak_path =
          if File.expand_path(path) == Dir.pwd
            "pak#{i}.pak"
          else
            File.join(path, "pak#{i}.pak")
          end
        break unless File.exist?(pak_path)
        pak_paths << pak_path
        i += 1
      end
      # Last pak has load priority
      paks_by_priority += pak_paths.reverse()
    end

    if paks_by_priority.size == 0
      puts("No pak files found")
      return
    end

    entries_hash = Hash.new
    paks_by_priority.each do |pak_path|
      open_pak(pak_path) do |pak_file|
        each_pak_entry(pak_file) do |entry|
          entries_hash[entry.path] ||= []
          entries_hash[entry.path] << pak_path
        end
      end
    end

    entries_hash.each do |path, pak_list|
      next unless pak_list.size > 1
      next unless (pak_list - options[:exclude_paks]).size > 0
      printf("%s: %s\n", path, pak_list.join(", "))
    end
  end


  ######################################################################
  # HELPERS
  ######################################################################

  def strings(key)
    case key
    when :skip      then noop? ? "skip"      : "skipped"
    when :overwrite then noop? ? "overwrite" : "overwrote"
    when :create    then noop? ? "create"    : "created"
    when :extract   then noop? ? "extract"   : "extracted"
    when :archive   then noop? ? "archive"   : "archived"
    end
  end

  def mkdir_p(path)
    return if noop?
    return if File.directory?(path)
    FileUtils.mkdir_p(path)
  end

  def pak_write(data, pak_file)
    return 0 if noop?
    pak_file.write(data)
  end

  def stream_entry(entry, pak_file, io)
    pak_file.seek(entry.offset)
    chunk_size = 1024 * 1024
    bytes_remaining = entry.size

    while (bytes_remaining > 0)
      read_size = [chunk_size, bytes_remaining].min()
      bytes = pak_file.read(read_size)
      io.write(bytes)
      bytes_remaining -= read_size
    end
  end
end

if $0 == __FILE__
  PAK.main()
end

